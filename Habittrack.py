# habit_tracker_baseline.py
import re
import math
import pandas as pd
import numpy as np
from datetime import datetime
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, accuracy_score
from sklearn.linear_model import LinearRegression, LogisticRegression

# ---------- 1) Utilities ----------
THAI_DIGITS = str.maketrans("‡πê‡πë‡πí‡πì‡πî‡πï‡πñ‡πó‡πò‡πô", "0123456789")

def norm_text(t: str) -> str:
    if pd.isna(t):
        return ""
    t = t.strip().lower().translate(THAI_DIGITS)
    t = re.sub(r"[^\w\s\.:%/+-]", " ", t)  # ‡πÄ‡∏Å‡πá‡∏ö ., :, %, /, +, -
    t = re.sub(r"\s+", " ", t)
    return t

# ---------- 2) Rule patterns (‡πÑ‡∏ó‡∏¢/‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©) ----------
PATTERNS = [
    # sleep
    (r"(‡∏ô‡∏≠‡∏ô|‡∏´‡∏•‡∏±‡∏ö|sleep)\s*(\d+(\.\d+)?)\s*(‡∏ä‡∏°\.|‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á|h|hr|hrs?)", "sleep_hours"),
    # steps
    (r"(‡πÄ‡∏î‡∏¥‡∏ô|‡∏Å‡πâ‡∏≤‡∏ß|steps?)\s*(\d{3,6})", "steps"),
    # exercise minutes
    (r"(‡∏ß‡∏¥‡πà‡∏á|‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢|exercise|workout|‡∏õ‡∏±‡πà‡∏ô|‡πÇ‡∏¢‡∏Ñ‡∏∞|‡∏ß‡∏¥‡∏î‡∏û‡∏∑‡πâ‡∏ô)[^\d]*(\d+)\s*(‡∏ô‡∏≤‡∏ó‡∏µ|mins?|m)", "exercise_min"),
    # coffee cups
    (r"(‡∏Å‡∏≤‡πÅ‡∏ü|coffee|‡πÄ‡∏≠‡∏™‡πÄ‡∏õ‡∏£‡∏™‡πÇ‡∏ã‡πà|‡∏•‡∏≤‡πÄ‡∏ï‡πâ)[^\d]*(\d+)\s*(‡πÅ‡∏Å‡πâ‡∏ß|cups?)", "coffee_cups"),
    # water (ml or liters)
    (r"(‡∏ô‡πâ‡∏≥|water)[^\d]*(\d+)\s*ml", "water_ml"),
    (r"(‡∏ô‡πâ‡∏≥|water)[^\d]*(\d+(\.\d+)?)\s*l", "water_l"),
    # screen time
    (r"(‡∏à‡∏≠|‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠|‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠|screen)[^\d]*(\d+)\s*(‡∏ô‡∏≤‡∏ó‡∏µ|mins?|m)", "screen_time_min"),
    (r"(‡∏à‡∏≠|‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠|‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠|screen)[^\d]*(\d+(\.\d+)?)\s*(‡∏ä‡∏°\.|‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á|h|hr)", "screen_time_hr"),
    # alcohol
    (r"(‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå|‡πÑ‡∏ß‡∏ô‡πå|‡πÄ‡∏´‡∏•‡πâ‡∏≤|alcohol|beer|wine)[^\d]*(\d+)\s*(‡πÅ‡∏Å‡πâ‡∏ß|‡∏î‡∏£‡∏¥‡πä‡∏á‡∏Ñ‡πå|drinks?)", "alcohol_units"),
    # junk food (binary cues)
    (r"(‡∏ü‡∏≤‡∏™‡∏ï‡πå‡∏ü‡∏π‡πâ‡∏î|‡∏Ç‡∏≠‡∏á‡∏ó‡∏≠‡∏î|‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô|‡∏Ç‡∏ô‡∏°|junk|soda|‡πÇ‡∏ã‡∏î‡∏≤‡∏´‡∏ß‡∏≤‡∏ô)", "junk_food_flag"),
]

def parse_note(note: str) -> dict:
    t = norm_text(note)
    out = {
        "sleep_hours": np.nan,
        "steps": np.nan,
        "exercise_min": np.nan,
        "coffee_cups": 0.0,
        "water_ml": np.nan,
        "screen_time_min": np.nan,
        "alcohol_units": 0.0,
        "junk_food": 0,
    }
    for pat, key in PATTERNS:
        for m in re.finditer(pat, t):
            if key == "sleep_hours":
                out["sleep_hours"] = float(m.group(2))
            elif key == "steps":
                out["steps"] = float(m.group(2))
            elif key == "exercise_min":
                out["exercise_min"] = float(m.group(2))
            elif key == "coffee_cups":
                out["coffee_cups"] += float(m.group(2))
            elif key == "water_ml":
                out["water_ml"] = float(m.group(2))
            elif key == "water_l":
                out["water_ml"] = float(m.group(2)) * 1000
            elif key == "screen_time_min":
                out["screen_time_min"] = float(m.group(2))
            elif key == "screen_time_hr":
                out["screen_time_min"] = float(m.group(2)) * 60
            elif key == "alcohol_units":
                out["alcohol_units"] += float(m.group(2))
            elif key == "junk_food_flag":
                out["junk_food"] = 1
    return out

# ---------- 3) Build daily table ----------
def build_daily(df_raw: pd.DataFrame) -> pd.DataFrame:
    df = df_raw.copy()
    df["date"] = pd.to_datetime(df["date"]).dt.date
    parsed = df["note"].apply(parse_note).apply(pd.Series)
    daily = pd.concat([df[["date"]], parsed], axis=1).groupby("date", as_index=False).agg({
        "sleep_hours":"max", "steps":"max", "exercise_min":"sum", "coffee_cups":"sum",
        "water_ml":"max", "screen_time_min":"max", "alcohol_units":"sum", "junk_food":"max"
    })
    # fill reasonable defaults
    daily["water_ml"] = daily["water_ml"].fillna(0)
    daily["sleep_hours"] = daily["sleep_hours"].fillna(0)
    daily["exercise_min"] = daily["exercise_min"].fillna(0)
    daily["steps"] = daily["steps"].fillna(0)
    daily["screen_time_min"] = daily["screen_time_min"].fillna(0)
    daily["alcohol_units"] = daily["alcohol_units"].fillna(0)
    daily["junk_food"] = daily["junk_food"].fillna(0)
    # features
    d = daily.sort_values("date").reset_index(drop=True)
    for col in ["sleep_hours","steps","exercise_min","coffee_cups","water_ml","screen_time_min"]:
        d[f"{col}_roll7_mean"] = d[col].rolling(7, min_periods=1).mean()
        d[f"{col}_roll7_delta"] = d[col] - d[f"{col}_roll7_mean"]
    # streak exercise
    d["exercise_flag"] = (d["exercise_min"]>=20).astype(int)
    d["streak_exercise"] = d["exercise_flag"] * (d["exercise_flag"].groupby((d["exercise_flag"]!=d["exercise_flag"].shift()).cumsum()).cumcount()+1)
    # sleep deficit 7d
    d["sleep_deficit_7d"] = (7*7) - d["sleep_hours"].rolling(7, min_periods=1).sum()  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥ 7 ‡∏ä‡∏°./‡∏Ñ‡∏∑‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    d["is_weekend"] = pd.to_datetime(d["date"], errors="coerce").dt.dayofweek >= 5# ‡∏´‡∏£‡∏∑‡∏≠ .dt.weekday ‡∏Å‡πá‡πÑ‡∏î‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
    return d

# ---------- 4) Insight rules ----------
def summarize_insights(d: pd.DataFrame, n_days=7) -> str:
    week = d.tail(n_days)
    msgs = []
    # ‚úÖ ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô
    highlights = []
    if (week["streak_exercise"].max() >= 3):
        highlights.append(f"‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏ï‡∏£‡∏µ‡∏Ñ {int(week['streak_exercise'].max())} ‡∏ß‡∏±‡∏ô üéâ")
    if (week["sleep_hours"].mean() >= 7):
        highlights.append("‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô ‚â• 7 ‡∏ä‡∏°. ‡∏î‡∏µ‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ü‡∏∑‡πâ‡∏ô‡∏ï‡∏±‡∏ß")
    if (week["coffee_cups"].mean() <= 1):
        highlights.append("‡∏Ñ‡∏≤‡πÄ‡∏ü‡∏≠‡∏µ‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≥ (‚â§1 ‡πÅ‡∏Å‡πâ‡∏ß/‡∏ß‡∏±‡∏ô)")
    if highlights:
        msgs.append("‚úÖ ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô: " + " ¬∑ ".join(highlights))
    # ‚ö†Ô∏è ‡∏£‡∏∞‡∏ß‡∏±‡∏á
    warns = []
    if (week["sleep_hours"] < 6).rolling(2).sum().max() >= 2:
        warns.append("‡∏ô‡∏≠‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 6 ‡∏ä‡∏°. 2 ‡∏ß‡∏±‡∏ô‡∏ï‡∏¥‡∏î")
    if (week["steps"] < week["steps_roll7_mean"]*0.8).sum() >= 2:
        warns.append("‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
    if (week["coffee_cups"] > week["coffee_cups_roll7_mean"]+1).sum() >= 1:
        warns.append("‡∏Ñ‡∏≤‡πÄ‡∏ü‡∏≠‡∏µ‡∏ô‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥‡∏ö‡∏≤‡∏á‡∏ß‡∏±‡∏ô")
    if (week["water_ml"] < 1500).sum() >= 3:
        warns.append("‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏ô‡πâ‡∏≠‡∏¢ (<1500 ml) ‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
    if warns:
        msgs.append("‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á: " + " ¬∑ ".join(warns))
    # üéØ ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞
    tips = []
    if week["sleep_deficit_7d"].iloc[-1] > 0:
        tips.append("‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ‚â• 7 ‡∏ä‡∏°./‡∏Ñ‡∏∑‡∏ô")
    if (week["steps"].mean() < 7000):
        tips.append("‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏ô ‚â• 7,000 ‡∏Å‡πâ‡∏≤‡∏ß/‡∏ß‡∏±‡∏ô")
    if (week["exercise_min"].sum() < 150):
        tips.append("‡∏™‡∏∞‡∏™‡∏°‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‚â• 150 ‡∏ô‡∏≤‡∏ó‡∏µ/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå")
    if (week["water_ml"].mean() < 1800):
        tips.append("‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÉ‡∏´‡πâ‡∏ñ‡∏∂‡∏á ~1.8‚Äì2.2 ‡∏•‡∏¥‡∏ï‡∏£/‡∏ß‡∏±‡∏ô")
    if tips:
        msgs.append("üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: " + " ¬∑ ".join(tips))
    return "\n".join(msgs) if msgs else "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ insight ‡πÄ‡∏î‡πà‡∏ô‡∏ä‡∏±‡∏î‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ"

# ---------- 5) ‡πÇ‡∏°‡πÄ‡∏î‡∏• baseline (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ target) ----------
def train_baseline(daily_with_target: pd.DataFrame):
    df = daily_with_target.dropna(subset=["wellbeing"]).copy()
    y = df["wellbeing"]
    X = df.drop(columns=["date","wellbeing"])
    X = X.fillna(0)
    X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.25,random_state=42)
    if y.nunique() > 3 and y.dtype != "object":
        model = LinearRegression()
        model.fit(X_train, y_train)
        pred = model.predict(X_test)
        print("R2:", round(r2_score(y_test, pred), 3))
        coefs = pd.Series(model.coef_, index=X.columns).sort_values(key=lambda s: s.abs(), ascending=False)
        print("Top features:\n", coefs.head(10))
    else:
        # ‡∏ñ‡πâ‡∏≤ wellbeing ‡πÄ‡∏õ‡πá‡∏ô label: good/ok/bad (‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô 0/1/2 ‡∏Å‡πà‡∏≠‡∏ô)
        y_enc = y.astype("category").cat.codes
        model = LogisticRegression(max_iter=1000)
        model.fit(X_train, y_enc.loc[X_train.index])
        acc = model.score(X_test, y_enc.loc[X_test.index])
        print("Accuracy:", round(acc,3))

# ---------- 6) Demo (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡πá‡∏Å ‡πÜ) ----------
if __name__ == "__main__":
    data = [
        {"date":"2025-08-17","note":"‡∏ô‡∏≠‡∏ô 6 ‡∏ä‡∏°. ‡πÄ‡∏î‡∏¥‡∏ô 6500 ‡∏Å‡πâ‡∏≤‡∏ß ‡∏Å‡∏≤‡πÅ‡∏ü 2 ‡πÅ‡∏Å‡πâ‡∏ß ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ 2 ‡∏ä‡∏°. ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥ 1200 ml ‡∏ß‡∏¥‡πà‡∏á 20 ‡∏ô‡∏≤‡∏ó‡∏µ"},
        {"date":"2025-08-18","note":"sleep 5.5 hr, coffee 1 cup, steps 5200, water 1.5 L, screen 120 min"},
        {"date":"2025-08-19","note":"‡∏ô‡∏≠‡∏ô 7 ‡∏ä‡∏°. ‡πÄ‡∏î‡∏¥‡∏ô 8000 ‡∏Å‡πâ‡∏≤‡∏ß ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ 30 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ô‡πâ‡∏≥ 1800 ml"},
        {"date":"2025-08-20","note":"‡∏ô‡∏≠‡∏ô 5 ‡∏ä‡∏°. ‡∏Å‡∏≤‡πÅ‡∏ü 3 ‡πÅ‡∏Å‡πâ‡∏ß ‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå 2 ‡πÅ‡∏Å‡πâ‡∏ß ‡πÄ‡∏î‡∏¥‡∏ô 4000 ‡∏Å‡πâ‡∏≤‡∏ß"},
        {"date":"2025-08-21","note":"‡∏ô‡∏≠‡∏ô 7.5 ‡∏ä‡∏°. ‡πÄ‡∏î‡∏¥‡∏ô 9000 ‡∏Å‡πâ‡∏≤‡∏ß ‡∏ô‡πâ‡∏≥ 2 L ‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á 25 ‡∏ô‡∏≤‡∏ó‡∏µ"},
        {"date":"2025-08-22","note":"sleep 7 hr, steps 7000, coffee 1 cup, screen 1.5 h"},
        {"date":"2025-08-23","note":"‡∏ô‡∏≠‡∏ô 6 ‡∏ä‡∏°. ‡πÄ‡∏î‡∏¥‡∏ô 5000 ‡∏Å‡πâ‡∏≤‡∏ß ‡∏Ç‡∏≠‡∏á‡∏ó‡∏≠‡∏î"},
    ]
    raw = pd.read_csv("test.csv")
    daily = build_daily(raw)
    print(daily.tail(3))
    print("\nINSIGHTS (7d):\n", summarize_insights(daily, n_days=7))