AI Habit Tracker (Pandas + scikit-learn)
เวอร์ชัน: baseline
ภาษา: ไทย

────────────────────────────────────────────────────────
1) หลักการใช้งาน (Usage)
────────────────────────────────────────────────────────
ข้อกำหนด:
- Python 3.10–3.12 (แนะนำ 3.11 สำหรับความนิ่งของ scikit-learn)
- ระบบทดสอบ: Windows/macOS/Linux

ติดตั้งด้วย pip:
  python -m venv venv
  # Windows (PowerShell): .\venv\Scripts\Activate.ps1
  # Windows (cmd):        .\venv\Scripts\activate
  # macOS/Linux:          source venv/bin/activate
  pip install -r requirements.txt

ติดตั้งด้วย uv (ถ้าใช้ uv):
  uv venv venv
  # Windows (PowerShell): .\venv\Scripts\Activate.ps1
  # macOS/Linux:          source venv/bin/activate
  uv pip install -r requirements.txt

รันตัวอย่าง baseline:
  python habit_tracker_baseline.py

การใช้กับไฟล์ CSV ของคุณเอง:
  1) สร้างไฟล์ your_logs.csv (UTF-8) มีคอลัมน์: date,note,wellbeing(ถ้ามี)
  2) แก้ไฟล์ habit_tracker_baseline.py ส่วน main ให้เป็นตัวอย่างด้านล่าง:
     --------------------------------------
     raw = pd.read_csv("your_logs.csv")
     daily = build_daily(raw)
     print(daily.tail(3))
     print("\nINSIGHTS (7d):\n", summarize_insights(daily, n_days=7))
     --------------------------------------
  3) รัน: python habit_tracker_baseline.py

ผลลัพธ์ที่คาดหวัง:
- แสดงตารางคุณลักษณะรายวัน (daily features) สำหรับช่วงท้าย ๆ ของข้อมูล
- สรุป INSIGHTS รายสัปดาห์แบบอ่านง่าย (จุดเด่น/ข้อควรระวัง/คำแนะนำ)
- ถ้าระบุคอลัมน์ wellbeing จะฝึกโมเดล baseline และแสดงผลลัพธ์เบื้องต้น (R² หรือ Accuracy)


────────────────────────────────────────────────────────
2) โครงสร้างโปรเจ็กต์ (แนะนำ)
────────────────────────────────────────────────────────
.
├─ habit_tracker_baseline.py     # โค้ดหลัก
├─ requirements.txt              # รายการไลบรารี
├─ readme.txt                    # เอกสารนี้
└─ your_logs.csv                 # (ตัวเลือก) ไฟล์กิจวัตรของผู้ใช้


────────────────────────────────────────────────────────
3) สคีมาข้อมูลที่อ่านเข้า (Input Schema)
────────────────────────────────────────────────────────
คอลัมน์ขั้นต่ำ:
- date        : วันที่ (รูปแบบ YYYY-MM-DD)
- note        : ข้อความบันทึกกิจกรรมรายวัน (ไทย/อังกฤษปนกันได้)
- wellbeing   : (ตัวเลือก) ค่าความเป็นอยู่ที่ดี 0–100 หรือ label เช่น good/ok/bad

ตัวแปรที่สกัดจาก note (ถ้ามีเจอในข้อความ):
- sleep_hours        (ชั่วโมงการนอน, ตัวอย่าง: "นอน 6 ชม." หรือ "sleep 7 hr")
- steps              (จำนวนก้าว/วัน, เช่น "เดิน 8000 ก้าว" หรือ "steps 6500")
- exercise_min       (นาทีออกกำลังกาย, เช่น "ออกกำลังกาย 30 นาที"/"exercise 30 min")
- coffee_cups        (จำนวนแก้วกาแฟ/วัน, สะสมค่าได้ถ้าพบหลายครั้ง)
- water_ml           (มิลลิลิตรน้ำดื่ม, รองรับหน่วย ml และ L)
- screen_time_min    (นาทีจอ/มือถือ/คอม, รองรับหน่วย นาที และ ชั่วโมง)
- alcohol_units      (จำนวนดริ๊งค์แอลกอฮอล์/วัน, สะสมค่าได้)
- junk_food          (ธง 0/1 หากเจอคำบ่งชี้อาหารขยะ เช่น ของทอด ของหวาน fast food)

หมายเหตุหน่วย:
- "1.5 L" จะถูกแปลงเป็น 1500 ml
- ชั่วโมงหน้าจอจะแปลงเป็นนาที (เช่น 1.5 h = 90 นาที)


────────────────────────────────────────────────────────
4) หลักการทำงาน (How it works)
────────────────────────────────────────────────────────
4.1 การทำความสะอาดข้อความ (Normalization)
- แปลงเลขไทยเป็นอารบิก (๐–๙ → 0–9)
- ลดรูปตัวอักษรเป็นตัวพิมพ์เล็ก ตัดอักขระที่ไม่จำเป็น และบีบช่องว่าง
- เก็บสัญลักษณ์ที่จำเป็นต่อการตีความตัวเลข เช่น ". : % / + -"

4.2 การสกัดค่าด้วยกติกา/regex (ไทย + อังกฤษ)
- ใช้แพทเทิร์นตรวจจับคำสำคัญและตัวเลข เช่น:
  • (นอน|หลับ|sleep) + hours
  • (เดิน|ก้าว|steps) + digits
  • (exercise|workout|วิ่ง|ออกกำลังกาย) + minutes
  • (กาแฟ|coffee) + cups
  • (น้ำ|water) + ml/L
  • (จอ|มือถือ|หน้าจอ|screen) + นาที/ชั่วโมง
  • (เบียร์|ไวน์|เหล้า|alcohol|beer|wine) + drinks
  • (ฟาสต์ฟู้ด|ของทอด|ของหวาน|junk|soda) → ตั้งค่า junk_food=1

4.3 การรวมรายวันและเติมค่า (Aggregation & Filling)
- groupby ตาม date แล้วสรุป:
  • max: sleep_hours, steps, water_ml, screen_time_min (รับค่าที่มากสุดของวัน)
  • sum: exercise_min, coffee_cups, alcohol_units (สะสมกิจกรรม/การบริโภค)
  • max: junk_food (ถ้าเจอสักครั้งภายในวัน ถือว่า 1)
- เติมค่าเริ่มต้น 0 ให้คอลัมน์ที่เหมาะสมหากไม่มีข้อมูลในวันนั้น

4.4 การสร้างคุณลักษณะ (Feature Engineering)
- rolling 7 วัน: สร้างค่าเฉลี่ย (col_roll7_mean) และส่วนต่างจากค่าเฉลี่ย (col_roll7_delta)
- streak_exercise: จำนวนวันที่ออกกำลังกายต่อเนื่อง (ตั้งเกณฑ์ ≥20 นาที/วัน)
- sleep_deficit_7d: ความขาดแคลนการนอนสะสม 7 วัน เทียบกับเป้าหมาย 7 ชม./คืน
- is_weekend: ธงวันเสาร์-อาทิตย์

4.5 กติกาสรุป Insight แบบอ่านง่าย (Rule-based)
- ✅ จุดเด่น: เช่น สตรีคออกกำลังกาย ≥3 วัน, นอนเฉลี่ย ≥7 ชม., คาเฟอีนเฉลี่ย ≤1 แก้ว
- ⚠️ ระวัง: เช่น นอน <6 ชม. 2 วันติด, กิจกรรมต่ำกว่าค่าเฉลี่ยหลายวัน,
            คาเฟอีนสูงกว่าค่าเฉลี่ย+1 แก้ว, น้ำดื่ม <1500 ml หลายวัน
- 🎯 ข้อแนะนำ: เพิ่มเวลานอนให้เฉลี่ย ≥7 ชม., เดิน ≥7,000 ก้าว/วัน,
               ออกกำลังสะสม ≥150 นาที/สัปดาห์, ดื่มน้ำ ~1.8–2.2 L/วัน
* เกณฑ์ทั้งหมดปรับได้ตามเป้าหมายส่วนบุคคล

4.6 โมเดลคาดการณ์ (ถ้ามีเป้าหมาย wellbeing)
- ถ้า wellbeing เป็นตัวเลขต่อเนื่อง: ใช้ LinearRegression → รายงาน R² และอันดับฟีเจอร์สำคัญ
- ถ้า wellbeing เป็นฉลาก (good/ok/bad): เข้ารหัสเป็น 0/1/2 → LogisticRegression → รายงาน Accuracy
- จุดประสงค์: ให้ภาพรวมความสัมพันธ์ ไม่ใช่การแพทย์หรือวินิจฉัยโรค

────────────────────────────────────────────────────────
5) การขยาย/ปรับแต่ง (Extensions)
────────────────────────────────────────────────────────
- เพิ่มพจนานุกรมคำพ้องและหน่วย (เช่น "ช็อต" สำหรับกาแฟ, เครื่องดื่มชูกำลัง ฯลฯ)
- แยก intent ด้วย TF-IDF/CountVectorizer เพื่อลด noise ข้อความอิสระ
- ทำแดชบอร์ด (เช่น Streamlit) แสดง metric cards, กราฟ rolling 7 วัน และ INSIGHTS
- กำหนดเป้าหมายส่วนตัว (personal goals) แล้วสร้าง alert/notification เฉพาะบุคคล
- รองรับอินพุตจากอุปกรณ์สวมใส่ (steps/HR/HRV) เพิ่มความแม่นยำ

────────────────────────────────────────────────────────
6) ข้อจำกัดและแนวทางแก้ (Limitations & Tips)
────────────────────────────────────────────────────────
- การสกัดจากข้อความเป็นแบบกติกา (rule-based) อาจพลาดคำสะกด/สแลง → เพิ่ม/ปรับ regex เมื่อพบเคสจริง
- ค่าที่ไม่ระบุในวันนั้นจะถูกเติม 0 → ปรับให้เหมาะกับบริบทของคุณ
- ค่าที่คีย์ไม่ตรงหน่วย/ภาษาอาจไม่ถูกจับ → พยายามบันทึกให้มีหน่วยชัดเจน (hr, min, ml, L, cups)
- Windows PowerShell อาจบล็อกสคริปต์ Activate.ps1:
  • รัน PowerShell ด้วยสิทธิ์ผู้ใช้ปกติแล้วใช้คำสั่ง:
      Set-ExecutionPolicy -Scope CurrentUser RemoteSigned
  • หรือเปิดใช้งาน env ผ่าน cmd.exe ด้วย .\venv\Scripts\activate

────────────────────────────────────────────────────────
7) ตัวอย่างบรรทัดข้อมูล (CSV ตัวอย่าง)
────────────────────────────────────────────────────────
date,note,wellbeing
2025-08-17,"นอน 6 ชม. เดิน 6500 ก้าว กาแฟ 2 แก้ว มือถือ 2 ชม. ดื่มน้ำ 1200 ml วิ่ง 20 นาที",72
2025-08-18,"sleep 5.5 hr, coffee 1 cup, steps 5200, water 1.5 L, screen 120 min",65
2025-08-19,"นอน 7 ชม. เดิน 8000 ก้าว ออกกำลังกาย 30 นาที น้ำ 1800 ml",80

────────────────────────────────────────────────────────
8) คำถามที่พบบ่อย (FAQ)
────────────────────────────────────────────────────────
ถาม: ต้องกรอก wellbeing ทุกวันไหม?
ตอบ: ไม่จำเป็น ถ้าไม่มีจะได้เฉพาะสรุป insight และฟีเจอร์รายวัน

ถาม: รองรับภาษาอังกฤษอย่างเดียวได้ไหม?
ตอบ: ได้ โค้ดรองรับทั้งไทย/อังกฤษ และแปลงเลขไทยให้โดยอัตโนมัติ

ถาม: ปรับเกณฑ์ INSIGHT ยังไง?
ตอบ: ดูฟังก์ชัน summarize_insights() แล้วแก้ค่าธรณี (threshold) ตามต้องการ

จบ
